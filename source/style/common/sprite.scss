// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$idea-name: 'idea';
$idea-x: 0px;
$idea-y: 0px;
$idea-offset-x: 0px;
$idea-offset-y: 0px;
$idea-width: 32px;
$idea-height: 32px;
$idea-total-width: 240px;
$idea-total-height: 32px;
$idea-image: 'sprite.png';
$idea: (0px, 0px, 0px, 0px, 32px, 32px, 240px, 32px, 'sprite.png', 'idea', );
$placeholder-name: 'placeholder';
$placeholder-x: 52px;
$placeholder-y: 0px;
$placeholder-offset-x: -52px;
$placeholder-offset-y: 0px;
$placeholder-width: 32px;
$placeholder-height: 32px;
$placeholder-total-width: 240px;
$placeholder-total-height: 32px;
$placeholder-image: 'sprite.png';
$placeholder: (52px, 0px, -52px, 0px, 32px, 32px, 240px, 32px, 'sprite.png', 'placeholder', );
$placeholder-1-name: 'placeholder_1';
$placeholder-1-x: 104px;
$placeholder-1-y: 0px;
$placeholder-1-offset-x: -104px;
$placeholder-1-offset-y: 0px;
$placeholder-1-width: 32px;
$placeholder-1-height: 32px;
$placeholder-1-total-width: 240px;
$placeholder-1-total-height: 32px;
$placeholder-1-image: 'sprite.png';
$placeholder-1: (104px, 0px, -104px, 0px, 32px, 32px, 240px, 32px, 'sprite.png', 'placeholder_1', );
$placeholder-2-name: 'placeholder_2';
$placeholder-2-x: 156px;
$placeholder-2-y: 0px;
$placeholder-2-offset-x: -156px;
$placeholder-2-offset-y: 0px;
$placeholder-2-width: 32px;
$placeholder-2-height: 32px;
$placeholder-2-total-width: 240px;
$placeholder-2-total-height: 32px;
$placeholder-2-image: 'sprite.png';
$placeholder-2: (156px, 0px, -156px, 0px, 32px, 32px, 240px, 32px, 'sprite.png', 'placeholder_2', );
$play-button-name: 'play-button';
$play-button-x: 208px;
$play-button-y: 0px;
$play-button-offset-x: -208px;
$play-button-offset-y: 0px;
$play-button-width: 32px;
$play-button-height: 32px;
$play-button-total-width: 240px;
$play-button-total-height: 32px;
$play-button-image: 'sprite.png';
$play-button: (208px, 0px, -208px, 0px, 32px, 32px, 240px, 32px, 'sprite.png', 'play-button', );
$spritesheet-width: 240px;
$spritesheet-height: 32px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($idea, $placeholder, $placeholder-1, $placeholder-2, $play-button, );
$spritesheet: (240px, 32px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
